import { Request, Response, NextFunction } from 'express';
import validateRoleFilter from './validateRoleFilter'; // Adjust the import path accordingly

describe('validateRoleFilter Middleware', () => {
  let req: Partial<Request>;
  let res: Partial<Response>;
  let next: jest.Mock;

  beforeEach(() => {
    req = { query: {} };
    res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };
    next = jest.fn();
  });

  it('should call next() when validation passes', () => {
    req.query = { role: 'admin' }; // Provide a valid query based on your schema

    validateRoleFilter(req as Request, res as Response, next);

    expect(next).toHaveBeenCalled();
    expect(res.status).not.toHaveBeenCalled();
  });

  it('should return 400 with validation error when validation fails', () => {
    req.query = { invalidKey: 'invalidValue' }; // Provide an invalid query based on your schema

    validateRoleFilter(req as Request, res as Response, next);

    expect(next).not.toHaveBeenCalled();
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({
      success: false,
      message: 'Validation error',
      data: null,
      errors: expect.anything(), // Customize based on expected schema errors
    });
  });
});